const TelegramApi = require("node-telegram-bot-api");
const fs = require("fs");

// üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = "7954187898:AAE1gcCn4zfby4Z8AsNl0pZfA_tLv2TgL4w";
const bot = new TelegramApi(token, { polling: true });

let BOT_USERNAME = "";
const chats = {};
let warnings = {};
let badWords = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ badwords.json
if (fs.existsSync("badwords.json")) {
    try {
        const raw = fs.readFileSync("badwords.json", "utf8");
        badWords = JSON.parse(raw).map(word => word.toLowerCase());
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è badwords.json:", err.message);
    }
} else {
    console.error("‚ö†Ô∏è –§–∞–π–ª badwords.json –Ω–µ –Ω–∞–π–¥–µ–Ω!");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ warnings.json
if (fs.existsSync("warnings.json")) {
    warnings = JSON.parse(fs.readFileSync("warnings.json", "utf8"));
}

// üé≤ –ò–≥—Ä–∞
const startGame = async (chatId) => {
    const randomNumber = Math.floor(Math.random() * 10);
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId, "–Ø –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!");
    await bot.sendMessage(chatId, "–û—Ç–≥–∞–¥—ã–≤–∞–π!", {
        reply_markup: {
            inline_keyboard: [[{ text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data: "/again" }]],
        },
    });
};

// üöÄ –ó–∞–ø—É—Å–∫
const start = async () => {
    try {
        const botInfo = await bot.getMe();
        BOT_USERNAME = botInfo.username;
        console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @${BOT_USERNAME}`);

        bot.setMyCommands([
            { command: "/start", description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
            { command: "/info", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" },
            { command: "/game", description: "–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É" },
            { command: "/gamesecond", description: "–ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤" },
        ]);

        // üì© –°–æ–æ–±—â–µ–Ω–∏—è
        bot.on("message", async (msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const userName = msg.from.username || msg.from.first_name;
            const text = msg.text?.toLowerCase();
            if (!text) return;

            // –ö–æ–º–∞–Ω–¥—ã
            if (text.startsWith("/start") || text.startsWith(`/start@${BOT_USERNAME.toLowerCase()}`)) {
                return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!`);
            }
            if (text.startsWith("/info") || text.startsWith(`/info@${BOT_USERNAME.toLowerCase()}`)) {
                return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç: ${msg.from.first_name}`);
            }
            if (text.startsWith("/game") || text.startsWith(`/game@${BOT_USERNAME.toLowerCase()}`)) {
                return startGame(chatId);
            }
            if (text.startsWith("/gamesecond") || text.startsWith(`/gamesecond@${BOT_USERNAME.toLowerCase()}`)) {
                return bot.sendMessage(chatId, "–Ø –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å —Ç–≤–æ—ë —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9!");
            }

            // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
            const hasBadWord = badWords.some(word => text.includes(word));
            if (hasBadWord) {
                try {
                    await bot.deleteMessage(chatId, msg.message_id);
                } catch (err) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
                }

                warnings[userId] = (warnings[userId] || 0) + 1;
                fs.writeFileSync("warnings.json", JSON.stringify(warnings, null, 2));

                if (warnings[userId] >= 3) {
                    const untilDate = Math.floor(Date.now() / 1000) + 60 * 60;
                    try {
                        await bot.restrictChatMember(chatId, userId, {
                            permissions: { can_send_messages: false },
                            until_date: untilDate,
                        });
                        await bot.sendMessage(chatId, `üîá @${userName} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 1 —á–∞—Å –∑–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è.`);
                        warnings[userId] = 0;
                        fs.writeFileSync("warnings.json", JSON.stringify(warnings, null, 2));
                    } catch (err) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ:", err.message);
                    }
                } else {
                    const left = 3 - warnings[userId];
                    await bot.sendMessage(chatId, `üö´ @${userName}, –Ω–µ –Ω–∞—Ä—É—à–∞–π! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${left}`);
                }
            }
        });

        // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        bot.on("callback_query", async (msg) => {
            const data = msg.data;
            const chatId = msg.message.chat.id;

            if (data === "/again") return startGame(chatId);

            const guess = parseInt(data);
            if (!isNaN(guess) && chats[chatId] !== undefined) {
                const correct = chats[chatId];
                if (guess === correct) {
                    await bot.sendMessage(chatId, `üéâ –¢—ã —É–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${correct}!`, {
                        reply_markup: {
                            inline_keyboard: [[{ text: "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data: "/again" }]],
                        },
                    });
                } else {
                    await bot.sendMessage(chatId, `üòî –ù–µ —É–≥–∞–¥–∞–ª. –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª ${correct}.`, {
                        reply_markup: {
                            inline_keyboard: [[{ text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "/again" }]],
                        },
                    });
                }
            }
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", err);
    }
};

// üöÄ –°—Ç–∞—Ä—Ç
start();