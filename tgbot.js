const TelegramApi = require("node-telegram-bot-api");
const fs = require("fs");

// ‚úÖ –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const token = "7954187898:AAE1gcCn4zfby4Z8AsNl0pZfA_tLv2TgL4w";
const bot = new TelegramApi(token, { polling: true });

// üõë –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
let badWords = [];
try {
    badWords = JSON.parse(fs.readFileSync("badwords.json", "utf8"));
} catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ badwords.json:", err);
}

// üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let warnings = {};
try {
    if (fs.existsSync("warnings.json")) {
        warnings = JSON.parse(fs.readFileSync("warnings.json", "utf8"));
    }
} catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ warnings.json:", err);
}

// üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const saveWarnings = () => {
    fs.writeFileSync("warnings.json", JSON.stringify(warnings, null, 2));
};

// ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.setMyCommands([
    { command: "/start", description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
    { command: "/info", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" }
]);

// üéØ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.username || msg.from.first_name;
    const text = msg.text?.toLowerCase();
    if (!text) return;

    // **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥**
    if (text === "/start") {
        return bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${msg.from.first_name}!`);
    }

    if (text === "/info") {
        return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç: ${msg.from.first_name}`);
    }

    // **–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤**
    const foundBadWords = badWords.some(word => text.includes(word));
    
    if (foundBadWords) {
        try {
            await bot.deleteMessage(chatId, msg.message_id);
        } catch (err) {
            console.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
            return;
        }

        // **–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è**
        warnings[userId] = (warnings[userId] || 0) + 1;
        saveWarnings();

        // **–ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É—Ç**
        if (warnings[userId] >= 3) {
            const untilDate = Math.floor(Date.now() / 1000) + 60 * 60;
            try {
                await bot.restrictChatMember(chatId, userId, {
                    permissions: { can_send_messages: false },
                    until_date: untilDate,
                });
                bot.sendMessage(chatId, `üîá @${userName} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 1 —á–∞—Å –∑–∞ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è.`);
                warnings[userId] = 0;
                saveWarnings();
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ:', err.message);
            }
        } else {
            const remaining = 3 - warnings[userId];
            bot.sendMessage(chatId, `üö´ @${userName}, –Ω–µ –Ω–∞—Ä—É—à–∞–π! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${remaining}`);
        }
    }
});